% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cbin.R
\name{cbin}
\alias{cbin}
\alias{conformal_bin}
\title{Conformal binning}
\usage{
conformal_bin(
  x,
  y,
  x_out,
  y_out = NULL,
  x_est = NULL,
  y_est = NULL,
  online = FALSE,
  weights = NULL,
  method = c("kmeans", "tree"),
  k = NULL,
  cp = 0.01
)
}
\arguments{
\item{x}{training covariates}

\item{y}{training labels}

\item{x_out}{new covariates}

\item{y_out}{new labels}

\item{x_est}{covariates in the estimation set}

\item{y_est}{labels in the estimation set}

\item{online}{logical specifying whether to sequentially update the training
data set. Default is \code{FALSE}.}

\item{weights}{non-negative weights assigned to each training covariate and the
new covariate. If omitted, equal weights are used (the default).}

\item{method}{method used to construct the bins; either \code{"k-means"} (default) or \code{"tree"}}

\item{k}{number of bins (for k-means clustering)}

\item{cp}{complexity parameter (for regression tree binning)}
}
\value{
\code{conformal_bin()} returns a list of objects of class \code{"cops"} containing
the conformal binning fit. See \code{\link{cops}} for details.
}
\description{
Derive conformal predictive systems based on binning. Either k-means clustering or
a regression tree is used to bin the covariates, and separate predictive systems are
then constructed for each bin.
}
\details{
Conformal binning generates conformal predictive systems based on binning algorithms.
Binning algorithms partition the covariate space into a finite number of bins,
find the bin in which the new covariate lies, and then use the empirical distribution
of the labels in this bin as a prediction for the new label. Conformal binning
provides a means to generate predictive system bands that are guaranteed to contain
an auto-calibrated forecast distribution. The information in the forecast depends
on what binning is performed.

The bins can either be constructed using k-means clustering (\code{method = "k-means"}),
or using a regression tree (\code{method = "tree"}). k-means finds the bins that minimise
the variance of the covariates assigned to the same bin, while the regression tree
partitions the covariates such that the variance of the corresponding labels
assigned to the same bin is minimised.

Since the regression tree depends on the labels corresponding to the covariates,
it can only be applied in the split conformal setting, and not in the full conformal setting.
The regression tree is fit to the estimation data \code{x_set} and \code{y_set}.
However, k-means clustering can be applied in both the split and full conformal settings.
If \code{x_set} is provided, then the bins are estimated using this estimation data.
Otherwise, the bins are estimated from the training data \code{x} (and the new covariate \code{x_out}).

The k-means clustering approach requires a choice for the number of bins, which can be specified
using the argument \code{k}. While the regression tree cannot return a specific number of bins,
the number of bins can indirectly be influenced by the choice of a complexity parameter \code{cp}.
The complexity parameter specifies the minimum improvement in fit required for a split in the
regression tree to be performed; a smaller complexity parameter therefore results in a more complex
tree with more bins.

The k-means algorithm is implemented using \code{\link{stats::kmeans}} and \code{\link{clue::cl_predict()}},
while the regression tree leverages \code{\link{rpart::rpart}}.
Further details can be found in the respective help pages.
}
\examples{

n <- 1000
x <- rnorm(n)
y <- rnorm(n, x, exp(x))

N <- 100
x_out <- rnorm(N)
y_out <- rnorm(N, x_out, exp(x_out))
plot(x_out, y_out)

## full conformal

fit <- conformal_bin(x, y, x_out, y_out, k = 10)
fit1 <- conformal_bin(x, y, x_out, y_out)
fit5 <- conformal_bin(x, y, x_out, y_out, k = 5)
fit100 <- conformal_bin(x, y, x_out, y_out, k = 100)

# compare for different k
crps_vec <- c("k = 1" = sapply(fit1, function(x) x$crps) |> mean(),
              "k = 5" = sapply(fit5, function(x) x$crps) |> mean(),
              "k = 10" = sapply(fit, function(x) x$crps) |> mean(),
              "k = 100" = sapply(fit100, function(x) x$crps) |> mean())
print(crps_vec)


## split conformal (with k means)

N0 <- 500
x_est <- rnorm(N0)
y_est <- rnorm(N0, x_est, exp(x_est))

fit <- conformal_bin(x, y, x_out, y_out, x_est, y_est, k = 10)
fit1 <- conformal_bin(x, y, x_out, y_out, x_est, y_est)
fit5 <- conformal_bin(x, y, x_out, y_out, x_est, y_est, k = 5)
fit100 <- conformal_bin(x, y, x_out, y_out, x_est, y_est, k = 100)

# compare for different k
crps_vec_sp <- c("k = 1" = sapply(fit1, function(x) x$crps) |> mean(),
                 "k = 5" = sapply(fit5, function(x) x$crps) |> mean(),
                 "k = 10" = sapply(fit, function(x) x$crps) |> mean(),
                 "k = 100" = sapply(fit100, function(x) x$crps) |> mean())
print(crps_vec_sp)


## split conformal (with regression tree)

fit <- conformal_bin(x, y, x_out, y_out, x_est, y_est, method = "tree")
fit001 <- conformal_bin(x, y, x_out, y_out, x_est, y_est, method = "tree", cp = 0.0001)
fit01 <- conformal_bin(x, y, x_out, y_out, x_est, y_est, method = "tree", cp = 0.001)
fit05 <- conformal_bin(x, y, x_out, y_out, x_est, y_est, method = "tree", cp = 0.005)
fit1 <- conformal_bin(x, y, x_out, y_out, x_est, y_est, method = "tree", cp = 0.1)

# compare for different cp
crps_vec_sp_tr <- c("cp = 0.0001" = sapply(fit001, function(x) x$crps) |> mean(),
                 "cp = 0.001" = sapply(fit01, function(x) x$crps) |> mean(),
                 "cp = 0.005" = sapply(fit05, function(x) x$crps) |> mean(),
                 "cp = 0.01" = sapply(fit, function(x) x$crps) |> mean(),
                 "cp = 0.1" = sapply(fit1, function(x) x$crps) |> mean())
print(crps_vec_sp_tr)

print(c(crps_vec_sp, crps_vec_sp_tr))


}
\references{
Allen, S., Gavrilopolous, G., Henzi, A. and J. Ziegel (2025):
`In-sample calibration yields conformal calibration guarantees',
\emph{arXiv pre-print} arXiv:2503.03841
\doi{10.48550/arXiv.2503.03841}
}
\seealso{
\code{\link{cops}} \code{\link{cidr}} \code{\link{lspm}}
}
\author{
Sam Allen
}
